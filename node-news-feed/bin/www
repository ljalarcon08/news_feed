#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app').app;
var debug = require('debug')('node-news:server');
var http = require('http');
var NodeModel=require('../models/node-model');
var request = require('request');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = require('../app').server;

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,()=>{
  //init database
  checkData();
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

//check if exist data
function checkData(){
  NodeModel.countAll((count)=>{
    if(count<20){
      getData();
    }
  });
}

//get data from resource
function getData(){
  var date = new Date();
  request.get('https://hn.algolia.com/api/v1/search_by_date?query=nodejs',
    (error, response,body) =>{
    if (!error && response.statusCode == 200) {
        var json_=JSON.parse(body);
        for(var i in json_.hits){
          if(json_.hits[i].title!=null||json_.hits[i].story_title!=null){
            addData(json_.hits[i]);

          }
        }
    }
    else{
      throw error;
    }
  });
}

//transform data in json object from collection
function addData(nodeHits){
  var title=(nodeHits.title!=null)?nodeHits.title:nodeHits.story_title;
  var url=(nodeHits.url!=null)?nodeHits.url:nodeHits.story_url;
  nodeNew={
    create_at:nodeHits.created_at,
    title:title,
    url:url,
    author:nodeHits.author,
    story_text:nodeHits.story_text,
    comment_text:nodeHits.comment_text,
    story_id:nodeHits.story_id,
    parent_id:nodeHits.parent_id,
    is_visible:true
  };
  NodeModel.insert(nodeNew,(err)=>{
    if(err)console.log(err);
  }); 
}

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
